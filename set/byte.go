// Code generated by underscore_generate. DO NOT EDIT.

package set

import "sync"

type ByteSet interface {
	Exist(i byte) bool
	Add(i byte)
	Adds(list ...byte)
	Delete(i byte)
	Deletes(list ...byte)
	List() []byte
}

var _ ByteSet = (*byteSet)(nil)

type byteSet struct {
	m sync.Map
}

func (s *byteSet) Exist(i byte) bool {
	_, ok := s.m.Load(i)
	return ok
}

func (s *byteSet) Add(i byte) {
	s.m.Store(i, struct{}{})
}

func (s *byteSet) Adds(list ...byte) {
	for _, v := range list {
		s.m.Store(v, struct{}{})
	}
}

func (s *byteSet) Delete(i byte) {
	s.m.Delete(i)
}

func (s *byteSet) Deletes(list ...byte) {
	for _, v := range list {
		s.m.Delete(v)
	}
}

func (s *byteSet) List() []byte {
	var list []byte
	s.m.Range(func(key, value interface{}) bool {
		list = append(list, key.(byte))
		return true
	})
	return list
}

func NewByte() ByteSet {
	return &byteSet{}
}
