// Code generated by underscore_generate. DO NOT EDIT.

package set

import "sync"

type RuneSet interface {
	Exist(i rune) bool
	Add(i rune)
	Adds(list ...rune)
	Delete(i rune)
	Deletes(list ...rune)
	List() []rune
}

var _ RuneSet = (*runeSet)(nil)

type runeSet struct {
	m sync.Map
}

func (s *runeSet) Exist(i rune) bool {
	_, ok := s.m.Load(i)
	return ok
}

func (s *runeSet) Add(i rune) {
	s.m.Store(i, struct{}{})
}

func (s *runeSet) Adds(list ...rune) {
	for _, v := range list {
		s.m.Store(v, struct{}{})
	}
}

func (s *runeSet) Delete(i rune) {
	s.m.Delete(i)
}

func (s *runeSet) Deletes(list ...rune) {
	for _, v := range list {
		s.m.Delete(v)
	}
}

func (s *runeSet) List() []rune {
	var list []rune
	s.m.Range(func(key, value interface{}) bool {
		list = append(list, key.(rune))
		return true
	})
	return list
}

func NewRune() RuneSet {
	return &runeSet{}
}
