// Code generated by underscore_generate. DO NOT EDIT.

package set

import "sync"

type Float32Set interface {
	Exist(i float32) bool
	Add(i float32)
	Adds(list ...float32)
	Delete(i float32)
	Deletes(list ...float32)
	List() []float32
}

var _ Float32Set = (*float32Set)(nil)

type float32Set struct {
	m sync.Map
}

func (s *float32Set) Exist(i float32) bool {
	_, ok := s.m.Load(i)
	return ok
}

func (s *float32Set) Add(i float32) {
	s.m.Store(i, struct{}{})
}

func (s *float32Set) Adds(list ...float32) {
	for _, v := range list {
		s.m.Store(v, struct{}{})
	}
}

func (s *float32Set) Delete(i float32) {
	s.m.Delete(i)
}

func (s *float32Set) Deletes(list ...float32) {
	for _, v := range list {
		s.m.Delete(v)
	}
}

func (s *float32Set) List() []float32 {
	var list []float32
	s.m.Range(func(key, value interface{}) bool {
		list = append(list, key.(float32))
		return true
	})
	return list
}

func NewFloat32() Float32Set {
	return &float32Set{}
}
