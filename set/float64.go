// Code generated by underscore_generate. DO NOT EDIT.

package set

import "sync"

type Float64Set interface {
	Exist(i float64) bool
	Add(i float64)
	Adds(list ...float64)
	Delete(i float64)
	Deletes(list ...float64)
	List() []float64
}

var _ Float64Set = (*float64Set)(nil)

type float64Set struct {
	m sync.Map
}

func (s *float64Set) Exist(i float64) bool {
	_, ok := s.m.Load(i)
	return ok
}

func (s *float64Set) Add(i float64) {
	s.m.Store(i, struct{}{})
}

func (s *float64Set) Adds(list ...float64) {
	for _, v := range list {
		s.m.Store(v, struct{}{})
	}
}

func (s *float64Set) Delete(i float64) {
	s.m.Delete(i)
}

func (s *float64Set) Deletes(list ...float64) {
	for _, v := range list {
		s.m.Delete(v)
	}
}

func (s *float64Set) List() []float64 {
	var list []float64
	s.m.Range(func(key, value interface{}) bool {
		list = append(list, key.(float64))
		return true
	})
	return list
}

func NewFloat64() Float64Set {
	return &float64Set{}
}
